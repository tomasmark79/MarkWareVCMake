{
    /* (c) Tomáš Mark 2024 */
    "version": "2.0.0",
    "inputs": [
        {
            "id": "specialTaskName",
            "type": "pickString",
            "description": "Select MarkWare Special Task",
            "options": [
                "Permutate All Tasks 🕧"
            ],
            "default": "Permutate All Tasks 🕧"
        },
        {
            "id": "taskName",
            "type": "pickString",
            "description": "Select MarkWare Task",
            "options": [
                "Zero to Hero 🦸",
                "Clean 🧹",
                "Conan 🗡️",
                "Configure 🔧",
                "Build 🔨",
                "Collect Licenses 📜",
                "Install Artefacts 📌",
                "Release Artefacts 📦",
                "",
                "📚 Zero to Hero 🦸",
                "📚 Clean 🧹",
                "📚 Conan 🗡️",
                "📚 Configure 🔧",
                "📚 Build 🔨",
                "📚 Collect Licenses 📜",
                "📚 Install Artefacts 📌",
                "📚 Release Artefacts 📦",
                "",
                "🎯 Zero to Hero 🦸",
                "🎯 Clean 🧹",
                "🎯 Conan 🗡️",
                "🎯 Configure 🔧",
                "🎯 Build 🔨",
                "🎯 Collect Licenses 📜",
                "🎯 Install Artefacts 📌",
                "🎯 Release Artefacts 📦",
            ],
            "default": "Build 🔨"
        },
        {
            "id": "buildArch",
            "type": "pickString",
            "description": "Select target architecture",
            "options": [
                "x86_64-linux-gnu",
                "aarch64-linux-gnu",
                "x86_64-w64-mingw32"
            ],
            "default": "x86_64-linux-gnu" /* change regarding you are sitting */
        },
        {
            "id": "buildType",
            "type": "pickString",
            "description": "Select type of build",
            "options": [
                "Debug",
                "Release",
                "RelWithDebInfo",
                "MinSizeRel"
            ],
            "default": "Debug"
        },
    ],
    "tasks": [
        {
            /* MarkWare Special Tasks Menu */
            "label": "MarkWare Special Tasks Menu",
            "type": "shell",
            "command": "${workspaceFolder}/SolutionController.sh",
            "args": [
                "${input:specialTaskName}"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "MarkWare Special Tasks Menu",
            "problemMatcher": [],
            "dependsOn": [
                /* "clear terminal" */ /* uncomment if you want to clear terminal before each task */
            ]
        },
        {
            /* MarkWare Tasks Menu */
            "label": "MarkWare Tasks Menu",
            "type": "shell",
            "command": "${workspaceFolder}/SolutionController.sh",
            "args": [
                "${input:taskName}",
                "${input:buildArch}",
                "${input:buildType}"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "MarkWare Tasks Menu",
            "problemMatcher": [],
            "dependsOn": [
                /* "clear terminal" */ /* uncomment if you want to clear terminal before each task */
            ]
        },
        {
            /* Direct Build (no menu) */
            "label": "Direct Build",
            "type": "shell",
            "command": "${workspaceFolder}/SolutionController.sh",
            "args": [
                "Build 🔨",
                "x86_64-linux-gnu",
                "Debug"
            ],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "detail": "Direct Build",
            "problemMatcher": []
        },
        {
            /* LINT ctrl + atl + L */
            "label": "lint",
            "type": "shell",
            "command": "find",
            "args": [
                "${workspaceFolder}",
                "-not",
                "-path",
                "\"${workspaceFolder}/Build/*\"",
                "\\(",
                "-name",
                "\"*.c\"",
                "-o",
                "-name",
                "\"*.cpp\"",
                "-o",
                "-name",
                "\"*.h\"",
                "-o",
                "-name",
                "\"*.hpp\"",
                "\\)",
                "-exec",
                "clang-tidy",
                "{}",
                "+"
            ],
            "group": "build",
            "problemMatcher": [
                "$gcc"
            ],
            "detail": "Generated task for linting C++ files with clang-tidy.",
        },
        {
            /* CLANG FORMAT ctrl + atl + F */
            "label": "clang-format",
            "type": "shell",
            "command": "find",
            "args": [
                "${workspaceFolder}",
                "-not",
                "-path",
                "\"${workspaceFolder}/Build/*\"",
                "-not",
                "-path",
                "\"${workspaceFolder}/CMakeFiles/*\"",
                "\\(",
                "-name",
                "\"*.c\"",
                "-o",
                "-name",
                "\"*.cpp\"",
                "-o",
                "-name",
                "\"*.h\"",
                "-o",
                "-name",
                "\"*.hpp\"",
                "\\)",
                "-exec",
                "clang-format",
                "-i",
                "{}",
                "+"
            ],
            "group": "build",
            "problemMatcher": [],
            "detail": "Generated task for formatting C++ files with clang-format.",
        },
        {
            /* CMAKE FORMAT ctrl + atl + M */
            "label": "cmake-format",
            "type": "shell",
            "command": "find",
            "args": [
                "${workspaceFolder}",
                "-not",
                "-path",
                "\"${workspaceFolder}/install/*\"",
                "-not",
                "-path",
                "\"${workspaceFolder}/cmake/*\"",
                "-not",
                "-path",
                "\"${workspaceFolder}/Utilities/*\"",
                "-not",
                "-path",
                "\"${workspaceFolder}/Build/*\"",
                "\\(",
                "-name",
                "\"CMakeLists.txt\"",
                "-o",
                "-name",
                "\"*.cmake\"",
                "\\)",
                "-exec",
                "cmake-format",
                "-i",
                "{}",
                "+"
            ],
            "group": "build",
            "problemMatcher": [],
            "detail": "Generated task for formatting CMake files with cmake-format.",
        },
        {
            /* SPELLCHECK BASH SCRIPTS recursive /* ctrl + shift + atl + B  */
            "label": "shellcheck project bash scripts",
            "type": "shell",
            "command": "shellcheck",
            "args": [
                "${workspaceFolder}/SolutionController.sh",
                "${workspaceFolder}/SolutionRenamer.sh"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "shellcheck project bash scripts",
            "problemMatcher": [],
            "dependsOn": [
                "clear terminal"
            ]
        },
        { /* clear terminal */
            "label": "clear terminal",
            "type": "shell",
            "command": "clear",
            "group": "none",
            "problemMatcher": []
        }
    ]
}